
from __future__ import annotations

from sqlalchemy.orm import selectinload
from decimal import Decimal

import pandas as pd
from io import BytesIO
import os
import tempfile
import json

from PIL import Image
import aiohttp

import pytz

from datetime import datetime, timedelta

from aiogram import Router, F
from aiogram import types
from aiogram.types import FSInputFile
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command, Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import func, select

from models import Category, Order, Product, User, OrderItem
from main import admin_id, async_session_factory, BOT_TOKEN


from keyboard import get_main_reply_keyboard
# --------------------------------------------------------------------------- #
#                         –§–∏–ª—å—Ç—Ä –¥–æ–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤                       #
# --------------------------------------------------------------------------- #


class AdminFilter(Filter):
    async def __call__(self, entity: Message | CallbackQuery) -> bool:  # noqa: D401
        message = entity if isinstance(entity, Message) else entity.message
        return message.chat and message.chat.id in admin_id


# --------------------------------------------------------------------------- #
#                                –°–æ—Å—Ç–æ—è–Ω–∏—è FSM                                #
# --------------------------------------------------------------------------- #


class AddProductSG(StatesGroup):
    waiting_for_category = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_photo = State()
    confirmation = State()


class AddCategorySG(StatesGroup):
    waiting_for_title = State()


class EditProductSG(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_photo = State()
    confirmation = State()


class EditCategorySG(StatesGroup):
    waiting_for_title = State()


# --------------------------------------------------------------------------- #
#                                  –†–æ—É—Ç–µ—Ä                                     #
# --------------------------------------------------------------------------- #

router = Router()
router.message.filter(AdminFilter())
router.callback_query.filter(AdminFilter())

# ================================
# /add_category
# ================================

@router.message(Command("add_category"))
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
async def add_category_start(message: Message, state: FSMContext) -> None:
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_category"))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=builder.as_markup())
    await state.set_state(AddCategorySG.waiting_for_title)


@router.callback_query(F.data == "cancel_add_category")
async def add_category_cancel(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await call.message.delete()
    await call.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.message(AddCategorySG.waiting_for_title)
async def add_category_save(message: Message, state: FSMContext) -> None:
    title = message.text.strip()

    if not title:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    async with async_session_factory() as session:
        exists = await session.scalar(
            select(func.count()).select_from(Category).where(Category.title == title)
        )
        if exists:
            await message.answer("–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            await state.clear()
            return
        session.add(Category(title=title))
        await session.commit()
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

# ================================
# /add_product
# ================================


@router.message(Command("add_product"))
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def add_product_start(message: Message, state: FSMContext) -> None:
    async with async_session_factory() as session:
        categories = (await session.scalars(select(Category))).all()
        if not categories:
            await message.answer(
                "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /add_category."
            )
            return
        markup = InlineKeyboardBuilder()
        for cat in categories:
            markup.add(InlineKeyboardButton(text=cat.title, callback_data=f"cat_{cat.id}"))
        markup.adjust(2)

        markup.row(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_add_product"))
    await message.answer(
        "üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=markup.as_markup(),
    )
    await state.set_state(AddProductSG.waiting_for_category)


@router.callback_query(F.data == "cancel_add_product")
async def cancel_add_product(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await call.message.delete()
    await call.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(AddProductSG.waiting_for_category, F.data.startswith("cat_"))
async def add_product_set_category(
    call: CallbackQuery, state: FSMContext
) -> None:
    await call.answer()
    category_id = int(call.data.split("_")[1])
    async with async_session_factory() as session:
        category = await session.get(Category, category_id)
        category_name = category.title if category else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
    await state.update_data(category_id=category_id)
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: <b>{category_name}</b>.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", parse_mode="HTML")
    await state.set_state(AddProductSG.waiting_for_title)


@router.message(AddProductSG.waiting_for_title)
async def add_product_set_title(message: Message, state: FSMContext) -> None:
    await state.update_data(title=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
    await state.set_state(AddProductSG.waiting_for_description)


@router.message(AddProductSG.waiting_for_description)
async def add_product_set_description(message: Message, state: FSMContext) -> None:
    desc = None if message.text.strip() == "-" else message.text.strip()
    await state.update_data(description=desc)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 249.90):")
    await state.set_state(AddProductSG.waiting_for_price)


@router.message(AddProductSG.waiting_for_price)
async def add_product_set_price(message: Message, state: FSMContext) -> None:
    try:
        price = Decimal(message.text.replace(",", "."))
        if price <= 0:
            raise ValueError
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 199.00")
        return

    await state.update_data(price=price)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ –æ–¥–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:")
    await state.set_state(AddProductSG.waiting_for_photo)

@router.message(AddProductSG.waiting_for_photo, F.photo)
async def add_product_set_photo(message: Message, state: FSMContext) -> None:
    file_id = message.photo[-1].file_id  
    await state.update_data(photo_file_id=file_id)

    
    data = await state.get_data()
    text_preview = (
        "<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è ID: {data['category_id']}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: <i>{data['title']}</i>\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '‚Äî'}\n"
        f"–¶–µ–Ω–∞: <b>{data['price']} ‚ÇΩ</b>\n"
        f"–§–æ—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ: {'‚úÖ' if data.get('photo_file_id') else '‚ùå'}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_product"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_product"),
    )
    
    await message.answer(text_preview, reply_markup=builder.as_markup())
    await state.set_state(AddProductSG.confirmation)


@router.callback_query(AddProductSG.confirmation, F.data == "cancel_product")
async def add_product_cancel(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await call.message.delete()
    await call.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(AddProductSG.confirmation, F.data == "save_product")
async def add_product_save(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    data = await state.get_data()
    async with async_session_factory() as session:
        product = Product(
            category_id=data["category_id"],
            title=data["title"],
            description=data["description"],
            photo_file_id=data["photo_file_id"],
            price=data["price"],
        )
        session.add(product)
        await session.commit()
    await call.message.edit_text("‚úÖ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()


# ================================
# /products
# ================================

@router.message(Command("products"))
@router.message(F.text == "üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã")
async def list_products(message: Message) -> None:
    async with async_session_factory() as session:
        result = await session.execute(
            select(Product)
            .where(Product.is_active.is_(True))
            .order_by(Product.category_id, Product.id) 
            .options(selectinload(Product.category)) 
        )
        products = result.scalars().all()

    if not products:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    category_dict = {}
    for product in products:
        category_title = product.category.title
        if category_title not in category_dict:
            category_dict[category_title] = []
        category_dict[category_title].append(product)
    lines = []
    for category_title, items in category_dict.items():
        items_lines = [f"{item.title} ‚Äî {item.price} ‚ÇΩ" for item in items]
        lines.append(f"<b>{category_title}:</b>\n" + "\n".join(items_lines))

    await message.answer("\n\n".join(lines))


# ================================
# edit_product:<id>
# ================================

@router.callback_query(F.data.startswith("edit_product:"))
async def edit_product_start(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    pid = int(call.data.split(":", 1)[1])

    async with async_session_factory() as session:
        product = await session.get(Product, pid)
        if not product:
            await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    await state.update_data(
        pid=pid,
        title=product.title,
        description=product.description,
        price=product.price,
        photo_file_id=product.photo_file_id,
    )
    cancel_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_edit_product"
                )
            ]
        ]
    )
    await call.message.answer(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{product.title}</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        parse_mode="HTML",
        reply_markup=cancel_kb
    )
    await state.set_state(EditProductSG.waiting_for_title)

@router.callback_query(F.data == "cancel_edit_product")
async def cancel_edit_product_handler(call: CallbackQuery, state: FSMContext):
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await call.message.edit_reply_markup()
    await call.message.delete()

@router.message(EditProductSG.waiting_for_title)
async def edit_product_title(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if text != "-":
        await state.update_data(title=text)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:"
    )
    await state.set_state(EditProductSG.waiting_for_description)


@router.message(EditProductSG.waiting_for_description)
async def edit_product_desc(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if text != "-":
        await state.update_data(description=None if text == "-" else text)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ) –∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
    await state.set_state(EditProductSG.waiting_for_price)


@router.message(EditProductSG.waiting_for_price)
async def edit_product_price(message: Message, state: FSMContext) -> None:
    txt = message.text.strip()
    if txt != "-":
        try:
            price = Decimal(txt.replace(",", "."))
            if price <= 0:
                raise ValueError
        except Exception:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ ¬´-¬ª.")
            return
        await state.update_data(price=price)

    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ ¬´-¬ª —Ç–µ–∫—Å—Ç–æ–º —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é:"
    )
    await state.set_state(EditProductSG.waiting_for_photo)


@router.message(EditProductSG.waiting_for_photo, F.photo | F.text)
async def edit_product_photo(message: Message, state: FSMContext) -> None:
    if message.photo:
        await state.update_data(photo_file_id=message.photo[-1].file_id)

    data = await state.get_data()
    text_preview = (
        "<b>–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <i>{data['title']}</i>\n"
        f"üìñ –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'] or '‚Äî'}\n"
        f"üíµ –¶–µ–Ω–∞: <b>{data['price']} ‚ÇΩ</b>\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?"
    )
    kb = InlineKeyboardBuilder()
    kb.add(
        InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_edit"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit"),
    )
    await message.answer(text_preview, reply_markup=kb.as_markup(), parse_mode="HTML")
    await state.set_state(EditProductSG.confirmation)


@router.callback_query(EditProductSG.confirmation, F.data == "cancel_edit")
async def edit_product_cancel(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await call.message.edit_reply_markup()
    await call.message.delete()


@router.callback_query(EditProductSG.confirmation, F.data == "save_edit")
async def edit_product_save(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    data = await state.get_data()
    pid = data["pid"]

    async with async_session_factory() as session:
        product = await session.get(Product, pid)
        if not product:
            await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        product.title = data["title"]
        product.description = data["description"]
        product.price = data["price"]
        product.photo_file_id = data["photo_file_id"]
        await session.commit()
    await call.message.edit_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    await state.clear()


# ================================
# edit_cat:<id>
# ================================

@router.callback_query(F.data.startswith("edit_cat:"))
async def edit_category_start(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    cid = int(call.data.split(":", 1)[1])
    
    async with async_session_factory() as session:
        cat = await session.get(Category, cid)
        if not cat:
            await call.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
    await state.update_data(cid=cid)
    
    await call.message.answer(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{cat.title}</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ¬´-¬ª —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:",
        parse_mode="HTML",
    )
    await state.set_state(EditCategorySG.waiting_for_title)


@router.message(EditCategorySG.waiting_for_title)
async def edit_category_title(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if text == "-":
        await message.answer("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –≤–Ω–µ—Å–µ–Ω–æ.")
        await state.clear()
        return

    data = await state.get_data()
    cid = data["cid"]

    async with async_session_factory() as session:
        cat = await session.get(Category, cid)
        if not cat:
            await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        cat.title = text
        await session.commit()

    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

# ================================
# remove_product:<id>  |  remove_cat:<id>
# ================================


@router.callback_query(F.data.startswith("remove_product:"))
async def delete_product(call: CallbackQuery) -> None:
    parts = call.data.split(":", maxsplit=1)
    if len(parts) != 2 or not parts[1].isdigit():
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    pid = int(parts[1])

    async with async_session_factory() as session:
        product = await session.get(Product, pid)
        if not product:
            await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        product_data = {
            "id": product.id,
            "title": product.title,
            "description": product.description,
            "price": product.price,
            "photo_file_id": product.photo_file_id,
        }

        product.is_active = False
        await session.commit()

    text_preview = (
        "<b>–¢–æ–≤–∞—Ä –æ—Ç–∫–ª—é—á—ë–Ω:</b>\n\n"
        f"<b>ID:</b> {product_data['id']}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{product_data['title']}</i>\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product_data['description'] or '‚Äî'}\n"
        f"<b>–¶–µ–Ω–∞:</b> <b>{product_data['price']} ‚ÇΩ</b>\n"
        f"<b>–§–æ—Ç–æ:</b> {'‚úÖ' if product_data['photo_file_id'] else '‚ùå'}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Ç–æ–≤–∞—Ä –æ–±—Ä–∞—Ç–Ω–æ: ‚ûï –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
    )

    if product_data['photo_file_id']:
        await call.message.answer_photo(
            photo=product_data['photo_file_id'],
            caption=text_preview,
            parse_mode="HTML",
            
        )
    else:
        await call.message.answer(
            text_preview,
            parse_mode="HTML",
            
        )

    await call.message.delete_reply_markup()


@router.message(F.text == "‚ûï –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def show_disabled_products(message: Message, state: FSMContext) -> None:
    async with async_session_factory() as session:
        result = await session.execute(select(Product).where(Product.is_active == False))
        disabled_products = result.scalars().all()

    if not disabled_products:
        await message.answer("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã. –ù–µ—Ç –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        return

    builder = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=product.title,
            callback_data=f"showdetails:{product.id}"
        )
        for product in disabled_products
    ]
    for i in range(0, len(buttons), 2):
        builder.row(*buttons[i:i+2])
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_main_menu"
        )
    )

    sent_msg = await message.answer(
        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –≤–∫–ª—é—á–∏—Ç—å –µ–≥–æ:",
        reply_markup=builder.as_markup(resize_keyboard=True),
    )
    await state.update_data(disabled_products_list_message_id=sent_msg.message_id)


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(call: CallbackQuery, state: FSMContext) -> None:
    user_id = call.from_user.id
    main_keyboard = get_main_reply_keyboard(user_id)
    await call.message.delete()
    await call.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_keyboard)
    await call.answer()  


@router.callback_query(F.data.startswith("showdetails:"))
async def show_product_details(call: CallbackQuery, state: FSMContext) -> None:
    parts = call.data.split(":", maxsplit=1)
    if len(parts) != 2 or not parts[1].isdigit():
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
        return

    pid = int(parts[1])

    async with async_session_factory() as session:
        product = await session.get(Product, pid)
        if not product:
            await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        categories_result = await session.execute(select(Category))
        categories = categories_result.scalars().all()

    text_preview = (
        "<b>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ</b>\n\n"
        f"<b>ID:</b> {product.id}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> <i>{product.title}</i>\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {product.description or '‚Äî'}\n"
        f"<b>–¶–µ–Ω–∞:</b> <b>{product.price} ‚ÇΩ</b>\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–∫—Ç–∏–≤–µ–Ω' if product.is_active else '–û—Ç–∫–ª—é—á—ë–Ω'}"
    )

    builder = InlineKeyboardBuilder()
    if categories:
        buttons = [
            InlineKeyboardButton(
                text=category.title, 
                callback_data=f"select_category:{product.id}:{category.id}"
            )
            for category in categories
        ]
        for i in range(0, len(buttons), 2):
            builder.row(*buttons[i:i+2])
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="back_to_disabled_list",
        ),
    )

    if product.photo_file_id:
        await call.message.answer_photo(
            photo=product.photo_file_id,
            caption=text_preview,
            parse_mode="HTML",
            reply_markup=builder.as_markup(),
        )
    else:
        await call.message.answer(
            text_preview,
            parse_mode="HTML",
            reply_markup=builder.as_markup(),
        )
    await call.message.delete_reply_markup()
    await call.answer()



@router.callback_query(F.data.startswith("select_category:"))
async def select_category(call: CallbackQuery) -> None:
    parts = call.data.split(":")
    if len(parts) != 3 or not parts[1].isdigit() or not parts[2].isdigit():
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    pid = int(parts[1])
    cid = int(parts[2])

    async with async_session_factory() as session:
        product = await session.get(Product, pid)
        if not product:
            await call.message.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        product.is_active = True
        product.category_id = cid 
        await session.commit()

    await call.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.title}</b> (ID {pid}) —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ID {cid}.",
        parse_mode="HTML")
    await call.message.delete_reply_markup()


@router.callback_query(F.data == "back_to_disabled_list")
async def back_to_disabled_list(call: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    list_msg_id = data.get("disabled_products_list_message_id")
    try:
        await call.message.delete()
    except Exception:
        pass  
    if list_msg_id:
        try:
            await call.message.chat.delete_message(list_msg_id)
        except Exception:
            pass 
    await show_disabled_products(call.message, state) 


@router.callback_query(F.data.startswith("remove_cat:"))
async def delete_category(call: CallbackQuery) -> None:
    parts = call.data.split(":", maxsplit=1)
    if len(parts) != 2 or not parts[1].isdigit():
        await call.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
        return
    
    cid = int(parts[1])

    async with async_session_factory() as session:
        cat = await session.get(Category, cid)
        if not cat:
            await call.message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        products_result = await session.execute(
            select(Product).where(Product.category_id == cid)
        )
        products = products_result.scalars().all()
        for product in products:
            product.is_active = False
            product.category_id = None 
        await session.delete(cat)
        await session.commit()

    await call.message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID {cid} —É–¥–∞–ª–µ–Ω–∞, —Ç–æ–≤–∞—Ä—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–≤—è–∑–∞–Ω—ã.")
    await call.message.delete_reply_markup()


@router.message(Command("orders"))
@router.message(F.text == "üõí –ó–∞–∫–∞–∑—ã")
async def list_orders(message: Message) -> None:
    async with async_session_factory() as session:
        orders = (
            await session.execute(
                select(Order)
                .order_by(Order.id.desc())
                .limit(20)
            )
        ).scalars().all()

    if not orders:
        await message.answer("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    kb = InlineKeyboardBuilder()
    text_lines = []
    for order in orders:
        text_lines.append(
            f"#{order.id} ‚Äî {order.total_price} ‚ÇΩ ‚Äî {order.payment_method}"
        )
        kb.add(
            InlineKeyboardButton(
                text=f"#{order.id} ‚Äî {order.status}",
                callback_data=f"order:{order.id}",
            )
        )

    kb.adjust(1)
    await message.answer(
        "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n" + "\n".join(text_lines),
        reply_markup=kb.as_markup(),
        parse_mode="HTML",
    )


async def send_orders_list(chat_id: int, bot) -> None:
    async with async_session_factory() as session:
        orders = (
            await session.execute(
                select(Order)
                .order_by(Order.id.desc())
                .limit(20)
            )
        ).scalars().all()

    if not orders:
        await bot.send_message(chat_id, "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    kb = InlineKeyboardBuilder()
    text_lines = []
    for order in orders:
        text_lines.append(
            f"#{order.id} ‚Äî {order.total_price} ‚ÇΩ ‚Äî {order.payment_method}"
        )
        kb.add(
            InlineKeyboardButton(
                text=f"#{order.id} ‚Äî {order.status}",
                callback_data=f"order:{order.id}",
            )
        )

    kb.adjust(1)
    await bot.send_message(
        chat_id,
        "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n" + "\n".join(text_lines),
        reply_markup=kb.as_markup(),
        parse_mode="HTML",
    )


@router.callback_query(F.data == "back_to_orders")
async def back_to_orders(call: CallbackQuery) -> None:
    await call.answer()
    
    if call.message:
        await call.message.delete()
    await send_orders_list(call.message.chat.id, call.bot)



@router.callback_query(F.data.startswith("order:"))
async def order_details(call: CallbackQuery) -> None:
    await call.answer()
    order_id = int(call.data.split(":", 1)[1])

    async with async_session_factory() as session:
        order: Order | None = await session.get(Order, order_id)
        if not order:
            await call.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user: User = await session.get(User, order.user_id)

        items = (
            await session.execute(
                select(OrderItem.qty, Product.title, OrderItem.item_price)
                .join(Product, Product.id == OrderItem.product_id)
                .where(OrderItem.order_id == order.id)
            )
        ).all()

    item_lines = [
        f"{title} √ó {qty} = {price * qty} ‚ÇΩ" for qty, title, price in items
    ]
    local_tz = pytz.timezone('Europe/Moscow') 
    created_at_local = order.created_at.astimezone(local_tz) 
        
    text = (
        f"üßæ <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.payment_method}\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {order.status}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name or user.tg_id}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üè† –ê–¥—Ä–µ—Å: {order.address or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ –î–∞—Ç–∞: {created_at_local.strftime('%d.%m.%Y %H:%M')}\n"
        f"üí∞ –°—É–º–º–∞: {order.total_price} ‚ÇΩ\n\n"
        "üì¶ <b>–°–æ—Å—Ç–∞–≤:</b>\n" + "\n".join(item_lines)
    )
    kb = InlineKeyboardBuilder()

    if order.status == "–≤—ã–ø–æ–ª–Ω–µ–Ω" or order.status == "–æ—Ç–º–µ–Ω–µ–Ω":
        kb.add(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_orders",
            )
        )
        await call.message.edit_text(
            text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML",
        )
    else:
        if order.status == "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ":
            kb.row(
                InlineKeyboardButton(
                    text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω",
                    callback_data=f"order_done:{order.id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"order_cancel:{order.id}",
                )
            )
        else:
            kb.add(
                InlineKeyboardButton(
                    text="üïí –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
                    callback_data=f"order_process:{order.id}",
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data=f"order_cancel:{order.id}",
                )
            )
        kb.add(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_orders",
            )
        )

        await call.message.edit_text(
            text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML",
        )

@router.callback_query(F.data.startswith("order_process:"))
async def process_order(call: CallbackQuery) -> None:
    await call.answer()
    order_id = int(call.data.split(":", 1)[1])

    async with async_session_factory() as session:
        order: Order | None = await session.get(Order, order_id)
        if not order:
            await call.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        order.status = "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        await session.commit()
        user: User = await session.get(User, order.user_id)
        await call.bot.send_message(
            chat_id=user.tg_id,
            text=f"–í–∞—à –∑–∞–∫–∞–∑ #<b>{order.id}</b> —É–∂–µ –≥–æ—Ç–æ–≤–∏—Ç—Å—è üçΩÔ∏è\n",
            parse_mode="HTML"
        )
    await order_details(call)


@router.callback_query(F.data.startswith("order_done:"))
async def complete_order(call: CallbackQuery) -> None:
    await call.answer()
    order_id = int(call.data.split(":", 1)[1])

    async with async_session_factory() as session:
        order: Order | None = await session.get(Order, order_id)
        if not order:
            await call.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        order.status = "–≤—ã–ø–æ–ª–Ω–µ–Ω"
        await session.commit()
        user: User = await session.get(User, order.user_id)
        await call.bot.send_message(
            chat_id=user.tg_id,
            text=f"–í–∞—à –∑–∞–∫–∞–∑ #{order.id} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! üéâ\n"
                 f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            parse_mode="HTML"
        )
    await call.message.answer(
            f"–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ #{order.id} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π. ‚úÖ"
        )
    await order_details(call)


@router.callback_query(F.data.startswith("order_cancel:"))
async def cancel_order(call: CallbackQuery) -> None:
    await call.answer()
    order_id = int(call.data.split(":", 1)[1])

    async with async_session_factory() as session:
        order: Order | None = await session.get(Order, order_id)
        if not order:
            await call.message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        order.status = "–æ—Ç–º–µ–Ω–µ–Ω"
        await session.commit()
        user: User = await session.get(User, order.user_id)
        await call.bot.send_message(
            chat_id=user.tg_id,
            text=f"–í–∞—à –∑–∞–∫–∞–∑ #<b>{order.id}</b> –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω ‚ùå\n –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
            parse_mode="HTML"
        )
    await call.message.answer(
            f"–í—ã –æ—Ç–º–µ—Ç–∏–ª–∏ –∑–∞–∫–∞–∑ #{order.id} –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π ‚ùå"
        )
    await order_details(call)

@router.message(Command("stats"))
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def bot_stats(message: Message) -> None:
    today = datetime.now().date()

    async with async_session_factory() as session:     
        users_cnt = await session.scalar(select(func.count()).select_from(User).where(User.id.isnot(None)))
        orders_cnt = await session.scalar(select(func.count()).select_from(Order))
        revenue = await session.scalar(
            select(func.coalesce(func.sum(Order.total_price), 0))
        )
        new_users_cnt = await session.scalar(
            select(func.count()).select_from(User).where(User.created_at >= today)
        )
        in_progress_cnt = await session.scalar(
            select(func.count()).select_from(Order).where(Order.status == "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
        )
        completed_cnt = await session.scalar(
            select(func.count()).select_from(Order).where(Order.status == "–≤—ã–ø–æ–ª–Ω–µ–Ω")
        )
        canceled_cnt = await session.scalar(
            select(func.count()).select_from(Order).where(Order.status == "–æ—Ç–º–µ–Ω–µ–Ω")
        )
        average_order_value = revenue / orders_cnt if orders_cnt > 0 else 0

    text = (
        "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_cnt}\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {orders_cnt}\n"
        f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {revenue} ‚ÇΩ\n"
        f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è: {new_users_cnt}\n\n"
        f"üìä –ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
        f"  - –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress_cnt}\n"
        f"  - –í—ã–ø–æ–ª–Ω–µ–Ω: {completed_cnt}\n"
        f"  - –û—Ç–º–µ–Ω–µ–Ω: {canceled_cnt}\n\n"
        f"üìà –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {average_order_value:.2f} ‚ÇΩ\n"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel –∏ JSON", callback_data="export_stats_data"))

    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")


def serialize_decimal(obj):
    if isinstance(obj, Decimal):
        return float(obj)
    raise TypeError(f"Type {type(obj)} not serializable")

@router.callback_query(F.data == "export_stats_data")
async def export_stats_data(call: CallbackQuery) -> None:
    await call.answer() 
    
    today = datetime.now().date()

    async with async_session_factory() as session:     
        users_cnt = await session.scalar(select(func.count()).select_from(User).where(User.id.isnot(None)))
        orders_cnt = await session.scalar(select(func.count()).select_from(Order))
        revenue = await session.scalar(
            select(func.coalesce(func.sum(Order.total_price), 0))
        )
        new_users_cnt = await session.scalar(
            select(func.count()).select_from(User).where(User.created_at >= today)
        )
        
        in_progress_cnt = await session.scalar(
            select(func.count()).select_from(Order).where(Order.status == "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
        )
        completed_cnt = await session.scalar(
            select(func.count()).select_from(Order).where(Order.status == "–≤—ã–ø–æ–ª–Ω–µ–Ω")
        )
        canceled_cnt = await session.scalar(
            select(func.count()).select_from(Order).where(Order.status == "–æ—Ç–º–µ–Ω–µ–Ω")
        )
        
        average_order_value = revenue / orders_cnt if orders_cnt > 0 else 0

    data = {
        "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": [
            "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤",
            "–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤",
            "–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è",
            "–ó–∞–∫–∞–∑—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
            "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
            "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã",
            "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫"
        ],
        "–ó–Ω–∞—á–µ–Ω–∏–µ": [
            users_cnt,
            orders_cnt,
            revenue,
            new_users_cnt,
            in_progress_cnt,
            completed_cnt,
            canceled_cnt,
            f"{average_order_value:.2f} ‚ÇΩ"
        ]
    }

    df = pd.DataFrame(data)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as temp_file:
        with pd.ExcelWriter(temp_file.name, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        
        input_file_excel = FSInputFile(temp_file.name, filename="bot_statistics.xlsx")

    json_data = {
        "statistics": {
            "users_count": users_cnt,
            "orders_count": orders_cnt,
            "revenue": revenue,
            "new_users_today": new_users_cnt,
            "in_progress_orders": in_progress_cnt,
            "completed_orders": completed_cnt,
            "canceled_orders": canceled_cnt,
            "average_order_value": average_order_value
        }
    }

    with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix=".json", encoding='utf-8') as temp_json_file:
        json.dump(json_data, temp_json_file, default=serialize_decimal, ensure_ascii=False, indent=4)
        temp_json_file.flush()  

        input_file_json = FSInputFile(temp_json_file.name, filename="bot_statistics.json")

    await call.message.answer_document(
        document=input_file_excel,
        caption="üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (Excel)"
    )
    await call.message.answer_document(
        document=input_file_json,
        caption="üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ (JSON)"
    )
    os.remove(temp_file.name)
    os.remove(temp_json_file.name)
