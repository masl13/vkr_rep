from __future__ import annotations
import logging
from decimal import Decimal
import types
from typing import Dict
import re
from dotenv import load_dotenv
import os
from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from main import admin_id, async_session_factory
from models import Category, Order, OrderItem, Product, User
from routers.subscriptions import buy_subscription, check_sub
from keyboard import get_main_reply_keyboard


router = Router()

# --------------------------------------------------------------------------- #
#                               –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / FSM                               #
# --------------------------------------------------------------------------- #

load_dotenv()

PAY_PROVIDER_TOKEN = os.getenv('PAY_PROVIDER_TOKEN')


class RegisterSG(StatesGroup):
    waiting_for_phone = State()


class CartSG(StatesGroup):
    waiting_for_address = State()
    waiting_for_comment = State()
    waiting_for_payment_method = State()


# --------------------------------------------------------------------------- #
#                              –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ‚Äë—Ü–∏–∏                          #
# --------------------------------------------------------------------------- #


def _get_cart(data: dict) -> Dict[int, int]:
    return data.setdefault("cart", {})


async def _sync_user(message: Message) -> User:
    async with async_session_factory() as session:
        user = await session.scalar(
            select(User).where(User.tg_id == message.chat.id)
        )
        if not user:
            user = User(
                tg_id=message.chat.id,
                full_name=message.chat.full_name,
            )
            session.add(user)
            await session.commit()

    return user


# --------------------------------------------------------------------------- #
#                                 /start                                      #
# --------------------------------------------------------------------------- #
    
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    user = await _sync_user(message)
    logging.info(f"User:  {user}, Phone: {user.phone}")
    if user.phone is None:
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True,
        )
        await message.answer(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=kb,
        )
        await state.set_state(RegisterSG.waiting_for_phone)
        return
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_reply_keyboard(message.from_user.id))


@router.message(RegisterSG.waiting_for_phone, F.contact)
async def save_phone(message: Message, state: FSMContext) -> None:
    if not message.contact or message.contact.user_id != message.from_user.id:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.")
        return
    async with async_session_factory() as session:
        user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
        if user:
            user.phone = message.contact.phone_number
            await session.commit()
    await message.answer("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    await message.answer("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é:", reply_markup=get_main_reply_keyboard(message.from_user.id))


# --------------------------------------------------------------------------- #
#                                 /menu                                       #
# --------------------------------------------------------------------------- #
@router.message(Command("menu"))
@router.message(lambda message: message.text == "üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def cmd_menu(message: Message) -> None:
    async with async_session_factory() as session:
        categories = await session.scalars(select(Category).order_by(Category.id))
        categories = categories.all()

    if not categories:
        await message.answer("–ú–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    kb = InlineKeyboardBuilder()
    buttons = []
    for cat in categories:
        buttons.append(
            InlineKeyboardButton(
                text=cat.title,
                callback_data=f"cat_{cat.id}",
            )
        )
    kb.add(*buttons)
    kb.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="exit_menu",
        )
    )

    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:\n–ù–∞–∂–º–∏—Ç–µ ‚¨ÖÔ∏è —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.", reply_markup=kb.as_markup())


@router.callback_query(F.data == "exit_menu")
async def cb_exit_menu(call: CallbackQuery) -> None:
    await call.message.delete()
    await call.message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_reply_keyboard(call.from_user.id))


# --------------------------------------------------------------------------- #
#                             –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É                            #
# --------------------------------------------------------------------------- #


@router.callback_query(F.data.startswith("cat_"))
async def cb_open_category(call: CallbackQuery) -> None:
    cat_id = int(call.data.split("_")[1])
    async with async_session_factory() as session:
        products = await session.scalars(
            select(Product)
            .where(Product.category_id == cat_id, Product.is_active.is_(True))
            .order_by(Product.id)
        )
        products = products.all()

    if not products:
        await call.answer("–ü—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è üôÅ", show_alert=True)
        return
    try:
        await call.message.delete()
    except Exception:
        pass
    product_kb = InlineKeyboardBuilder()
    buttons = [
        InlineKeyboardButton(
            text=prod.title,
            callback_data=f"show_product_details:{prod.id}",
        ) for prod in products
    ]
    for i in range(0, len(buttons), 2):
        product_kb.row(*buttons[i:i+2])
    if call.from_user.id in admin_id:
        product_kb.row(
            InlineKeyboardButton(
                text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                callback_data=f"edit_cat:{cat_id}",
            )
        )
        product_kb.row(
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                callback_data=f"remove_cat:{cat_id}",
            )
        )
    product_kb.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="exit_cart",
        )
    )
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
        reply_markup=product_kb.as_markup(resize_keyboard=True),
    )
    await call.answer()



@router.callback_query(F.data.startswith("show_product_details:"))
async def show_product_details(call: CallbackQuery) -> None:
    prod_id = int(call.data.split(":")[1])
    async with async_session_factory() as session:
        product = await session.get(Product, prod_id)
        if not product:
            await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
    try:
        await call.message.delete()
    except Exception:
        pass
    kb = InlineKeyboardBuilder()
    kb.add(
        InlineKeyboardButton(
            text=f"–¶–µ–Ω–∞: {product.price} ‚ÇΩ", 
            callback_data=f"prod_{product.id}", 
        ),
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
            callback_data=f"cat_{product.category_id}",
        ),
    )
    kb.adjust(1)

    if product.photo_file_id:
        await call.message.answer_photo(
            photo=product.photo_file_id,
            caption=(
                f"<b>{product.title}</b>\n"
                f"{product.description}\n"
            ),
            reply_markup=kb.as_markup(),
        )
    else:
        await call.message.answer(
            text=(
                f"<b>{product.title}</b>\n"
                f"{product.description}\n"
            ),
            reply_markup=kb.as_markup(),
        )
    
    await call.answer()


# --------------------------------------------------------------------------- #
#                             –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É                            #
# --------------------------------------------------------------------------- #


@router.callback_query(F.data.startswith("prod_"))
@router.callback_query(F.data.startswith("reallyprod_"))
async def cb_add_product(call: CallbackQuery, state: FSMContext) -> None:
    prod_id = int(call.data.split("_")[1])

    try:
        await call.message.delete()
    except Exception:
        pass

    async with async_session_factory() as session:
        product = await session.get(Product, prod_id)

    if not product or not product.is_active:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    if call.from_user.id in admin_id and call.data.startswith("prod_"):
        kb = InlineKeyboardBuilder()
        kb.add(
            InlineKeyboardButton(
                text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"edit_product:{product.id}",
            ),
            InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å",
                callback_data=f"remove_product:{product.id}",
            ),
            InlineKeyboardButton(
                text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"reallyprod_{product.id}",
            )
        )
        kb.adjust(1)
        await call.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–æ–º ¬´{product.title}¬ª:",
            reply_markup=kb.as_markup(),
        )
        return


    data = await state.get_data()
    cart = _get_cart(data)
    cart[prod_id] = cart.get(prod_id, 0) + 1
    await state.update_data(cart=cart)

    await call.answer(f"–î–æ–±–∞–≤–∏–ª–∏ ¬´{product.title}¬ª –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    await cmd_cart(call.message, state)
   

# --------------------------------------------------------------------------- #
#                                   /cart                                     #
# --------------------------------------------------------------------------- #


@router.callback_query(F.data == "cart")
async def cb_cart(call: CallbackQuery, state: FSMContext) -> None:
    await cmd_cart(call.message, state)
    await call.answer()      

@router.message(Command("cart"))
@router.message(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def cmd_cart(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    cart = _get_cart(data)

    kb = InlineKeyboardBuilder()
    if not cart:
        kb.add(InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="exit_cart"))
        kb.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="exit_menu"))
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n–ù–∞–∂–º–∏—Ç–µ üìã —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.\n–ù–∞–∂–º–∏—Ç–µ üè† —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.", reply_markup=kb.as_markup())
        return
        
    async with async_session_factory() as session:
        products: Dict[int, Product] = {
            p.id: p
            async for p in await session.stream_scalars(
                select(Product).where(Product.id.in_(cart.keys()))
            )
        }

    lines = []
    total = Decimal(0)
    for pid, qty in cart.items():
        product = products.get(pid)
        if not product:
            continue
        item_sum = product.price * qty
        total += item_sum
        lines.append(f"<b>{product.title}</b> √ó {qty} = {item_sum} ‚ÇΩ")
        kb.add(
            InlineKeyboardButton(text="‚ûñ", callback_data=f"dec_{pid}"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"inc_{pid}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"del_{pid}"),
        )
    kb.adjust(3)

    kb.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑", callback_data="exit_cart"))
    kb.row(InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout"))
    kb.row(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="exit_menu")) 

    sale_total = (total * Decimal("0.85")).quantize(Decimal("0.01"))
    total_text = (
        f"\n\n<b>–ò—Ç–æ–≥–æ: {total} ‚ÇΩ</b>"
        if not await check_sub(message.chat.id)
        else f"\n\n<b>–ò—Ç–æ–≥–æ: <s>{total}</s> {sale_total} ‚ÇΩ</b>"
    )
    text = "\n".join(lines) + total_text

    try:
        await message.edit_text(text, reply_markup=kb.as_markup())
    except:
        await message.answer(text, reply_markup=kb.as_markup())



@router.callback_query(F.data == "exit_cart")
async def cb_exit_cart(call: CallbackQuery, state: FSMContext) -> None:
    await call.message.delete()  
    await cmd_menu(call.message) 
    await call.answer()


@router.callback_query(F.data.startswith(("inc_", "dec_", "del_")))
async def cb_edit_cart(call: CallbackQuery, state: FSMContext) -> None:
    action, pid_str = call.data.split("_", 1)
    pid = int(pid_str)
    data = await state.get_data()
    cart = _get_cart(data)

    if pid not in cart:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
        return

    if action == "inc":
        cart[pid] += 1
    elif action == "dec":
        cart[pid] -= 1
        if cart[pid] <= 0:
            del cart[pid]
    elif action == "del":
        del cart[pid]

    await state.update_data(cart=cart)
    if not cart:
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="exit_cart"))
        kb.add(InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="exit_menu"))
        try:
            await call.message.edit_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n–ù–∞–∂–º–∏—Ç–µ üìã —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.\n–ù–∞–∂–º–∏—Ç–µ üè† —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.", reply_markup=kb.as_markup())
        except:
            await call.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n–ù–∞–∂–º–∏—Ç–µ üìã —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é.\n–ù–∞–∂–º–∏—Ç–µ üè† —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.", reply_markup=kb.as_markup())
        await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return

    await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    await cmd_cart(call.message, state) 


# --------------------------------------------------------------------------- #
#                            –®–∞–≥: –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏                         #
# --------------------------------------------------------------------------- #

@router.callback_query(F.data.in_(["checkout"]))
async def cb_checkout(call: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    cart = _get_cart(data)

    async with async_session_factory() as session:
        products: dict[int, Product] = {
            p.id: p
            async for p in await session.stream_scalars(
                select(Product).where(Product.id.in_(cart.keys()))
            )
        }

    total = Decimal(0)
    for pid, qty in cart.items():
        product = products.get(pid)
        if product:
            item_sum = product.price * qty
            total += item_sum
    user_id = call.from_user.id
    has_subscription = await check_sub(user_id)
    discount_rate = Decimal("0.15") if has_subscription else Decimal("0.0")

    total_after_discount = total * (1 - discount_rate)

    if total_after_discount < Decimal("1000"):
        await call.message.answer(
            "‚ùóÔ∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ ‚Äî 1000 —Ä—É–±–ª–µ–π.</b>\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É."
        )
        return

    kb_back = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cart_del_cart")]
    ])

    kb_map = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –Ø–Ω–¥–µ–∫—Å", 
                                url="https://yandex.ru/map-widget/v1/?um=constructor%3Ab1cf7a1661b223dd719b0e8013361fb7fad90c6e3fede5df2f3c232c5ae5de40&amp;source=constructor")]
    ])                        
    
    instructions_text = (
        "üìç <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
        "<b>–§–æ—Ä–º–∞—Ç:</b> –ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 5\n"
        "‚Ä¢ –ö–∞–∑–∞–Ω—å, –±—É–ª. –£—à–∞–∫–æ–≤–∞, –¥. 3\n"
        "‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –ú–∞–ª—ã—à–µ–≤–∞, –¥. 12\n\n"
        "<b>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
        "‚Äì –ì–æ—Ä–æ–¥ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã\n"
        "‚Äì –ü—Ä–µ—Ñ–∏–∫—Å—ã —É–ª–∏—Ü: —É–ª., –ø—Ä–æ—Å–ø., –ø–µ—Ä. –∏ —Ç.–¥.\n"
        "‚Äì –î–æ–º —É–∫–∞–∑–∞–Ω —Å –Ω–æ–º–µ—Ä–æ–º: –¥. 10\n"
        "‚Äì –ö–≤–∞—Ä—Ç–∏—Ä–∞ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–≤. 5\n"
    )

    address_msg = await call.message.answer(
        text=instructions_text,
        parse_mode="HTML",
        reply_markup=kb_back
    )

    map_msg = await call.message.answer(
        text="–ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–æ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=kb_map
    )

    await state.set_state(CartSG.waiting_for_address)
    await call.message.delete()
    await state.update_data(address_message_id=address_msg.message_id, map_message_id=map_msg.message_id)

@router.callback_query(F.data == "cart_del_cart")
async def cb_cart(call: CallbackQuery, state: FSMContext) -> None:
    data = await state.get_data()
    map_message_id = data.get("map_message_id")

    if map_message_id:
        try:
            await call.bot.delete_message(chat_id=call.from_user.id, message_id=map_message_id)
        except Exception as e:
           logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–æ–π: {e}")

    await cmd_cart(call.message, state)
    await call.answer()      


@router.message(CartSG.waiting_for_address)
async def set_address(message: types.Message, state: FSMContext) -> None:
    address = message.text.strip()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="cart_del_cart")]
    ])

    data = await state.get_data()
    address_message_id = data.get("address_message_id")
    if address_message_id:
        try:
            await message.bot.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=address_message_id,
                reply_markup=None
            )
        except Exception:
            pass 

    if not is_valid_address(address):
        address_msg = await message.answer(
            "–ê–¥—Ä–µ—Å –±—ã–ª –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ!\n",
            parse_mode="HTML",
            reply_markup=kb
        )
        await state.update_data(address_message_id=address_msg.message_id)
        return
    await state.update_data(address=address)

    kb_builder = InlineKeyboardBuilder()
    kb_builder.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="checkout"))

    comment_message = await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–µ—Å–ª–∏ –Ω–µ—Ç –≤–≤–µ–¥–∏—Ç–µ - ):",
        reply_markup=kb_builder.as_markup()
    )
    await state.update_data(comment_message_id=comment_message.message_id)
    await state.set_state(CartSG.waiting_for_comment)


@router.message(CartSG.waiting_for_comment)
async def set_comment(message: types.Message, state: FSMContext) -> None:
    comment = message.text.strip()
    await state.update_data(comment=comment) 

    data = await state.get_data()
    comment_message_id = data.get("comment_message_id")
    if comment_message_id:
        try:
            await message.bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=comment_message_id, reply_markup=None)
        except Exception:
            pass

    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω",
        callback_data="pay_online",
    ))
    kb.add(InlineKeyboardButton(
        text="üíµ –ù–∞–ª–∏—á–Ω—ã–µ / –∫–∞—Ä—Ç–∞ –∫—É—Ä—å–µ—Ä—É",
        callback_data="pay_cash",
    ))
    kb.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        callback_data="checkout",
    ))
    kb.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞",
        callback_data="cancel_order",
    ))
    kb.adjust(1)

    payment_message = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=kb.as_markup(),
    )
    await state.update_data(payment_message_id=payment_message.message_id)
    await state.set_state(CartSG.waiting_for_payment_method)


@router.callback_query(F.data == "cancel_order")
async def cb_cart(call: CallbackQuery, state: FSMContext) -> None:
    await cmd_cart(call.message, state)
    await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await call.message.delete()
    await call.message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!", reply_markup=get_main_reply_keyboard(call.from_user.id))


def is_valid_address(address: str) -> bool:
    pattern = re.compile(
        r'^\s*'                             
        r'([–ê-–Ø–Å][–∞-—è—ë]+(?:\s[–ê-–Ø–Å][–∞-—è—ë]+)*)\s*,?\s*'  
        r'(—É–ª\.?|—É–ª–∏—Ü–∞|–ø—Ä–æ—Å–ø\.?|–ø–µ—Ä\.?|–±—É–ª\.?|—à–æ—Å—Å–µ|–ø—Ä-—Ç|–ø–µ—Ä–µ—É–ª–æ–∫)\s+[–ê-–Ø–Å–∞-—è—ë\s\d\-]+,?\s*'  
        r'–¥\.?\s*\d+[–∞-—è–ê-–Ø—ë–Å]?(?:,?\s*)?'      
        r'(–∫–≤\.?\s*\d+)?\s*$'              
        , re.IGNORECASE | re.UNICODE)

    match = pattern.match(address)
    return bool(match)


# --------------------------------------------------------------------------- #
#                –®–∞–≥: –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (–æ–Ω–ª–∞–π–Ω / –Ω–∞–ª–∏—á–Ω—ã–µ)                #
# --------------------------------------------------------------------------- #

@router.callback_query(CartSG.waiting_for_payment_method)
async def choose_payment(call: CallbackQuery, state: FSMContext) -> None:
    await call.answer()
    data = await state.get_data()
    cart = _get_cart(data)

    payment_message_id = data.get("payment_message_id")
    if payment_message_id:
        try:
            await call.message.bot.delete_message(chat_id=call.from_user.id, message_id=payment_message_id)
        except Exception:
            pass  

    if call.data == "pay_cash":
        await _finalize_order(
            call.message, state, pay_online=False, successful=True
        )
        return

    user_id = call.from_user.id
    has_subscription = await check_sub(user_id)
    discount_rate = Decimal("0.15") if has_subscription else Decimal("0.0")

    async with async_session_factory() as session:
        products: Dict[int, Product] = {
            p.id: p
            async for p in await session.stream_scalars(
                select(Product).where(Product.id.in_(cart.keys()))
            )
        }

    prices: list[LabeledPrice] = []
    for pid, qty in cart.items():
        prod = products[pid]
        item_total = prod.price * qty
        if has_subscription:
            item_total *= (1 - discount_rate)

        prices.append(
            LabeledPrice(
                label=f"{prod.title} √ó {qty}",
                amount=int(item_total * 100),  
            )
        )

    invoice_message = await call.message.bot.send_invoice(
        chat_id=call.from_user.id,
        title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
        description="Food Delivery",
        payload="food-delivery-payload",
        provider_token=PAY_PROVIDER_TOKEN,
        currency="RUB",
        prices=prices,
        need_email=False,
        need_phone_number=False,
        photo_url="https://i.fbcd.co/products/original/d32491363c1d52ac365372cd2df281d6a7cf44f8873fa0900cd4a78a1528628c.jpg",
        photo_size=51200,    
        photo_width=640,     
        photo_height=480     
    )

    await state.update_data(invoice_message_id=invoice_message.message_id)


# --------------------------------------------------------------------------- #
#                      pre_checkout_query & successful_payment                #
# --------------------------------------------------------------------------- #


@router.pre_checkout_query()
async def pre_checkout_qh(query: PreCheckoutQuery) -> None:
    await query.answer(ok=True)


@router.message(lambda m: m.successful_payment is not None)
async def successful_payment(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    invoice_message_id = data.get("invoice_message_id")
    if invoice_message_id:
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=invoice_message_id)
        except Exception:
            pass  
    if message.successful_payment.currency == "XTR":
        await buy_subscription(message)
        return
    
    await _finalize_order(message, state, pay_online=True, successful=True)

# --------------------------------------------------------------------------- #
#                          –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è                   #
# --------------------------------------------------------------------------- #

async def _finalize_order(
    message: Message,
    state: FSMContext,
    *,
    pay_online: bool,
    successful: bool,
) -> None:
    data = await state.get_data()
    cart = _get_cart(data)
    address = data["address"]
    user_id = message.chat.id  
    has_subscription = await check_sub(user_id) 
    discount_rate = Decimal("0.15") if has_subscription else Decimal("0.0") 
    
    async with async_session_factory() as session:
        products_map: Dict[int, Product] = {
            p.id: p
            async for p in await session.stream_scalars(
                select(Product).where(Product.id.in_(cart.keys()))
            )
        }
        total_without_discount = Decimal(
            sum(products_map[pid].price * qty for pid, qty in cart.items())
        )
        total_with_discount = (total_without_discount * (Decimal("1") - discount_rate)).quantize(Decimal("0.01"))

        total = total_with_discount if has_subscription else total_without_discount
         
        db_user = await session.scalar(
            select(User).where(User.tg_id == message.chat.id)
        )

        comment = data.get("comment", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω.")
        product_titles = [products_map[pid].title for pid in cart.keys()]
        title = ", ".join(product_titles) if product_titles else "–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è"

        order = Order(
            user_id=db_user.id,
            status="–ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
            payment_method="–æ–ø–ª–∞—á–µ–Ω –æ–Ω–ª–∞–π–Ω" if pay_online else "–æ–ø–ª–∞—Ç–∞ –æ—Ñ—Ñ–ª–∞–π–Ω",
            total_price=total,
            comment=comment,
            title=title,
            address=address,
        )
        session.add(order)
        await session.flush()  

        for pid, qty in cart.items():
            prod = products_map[pid]
            session.add(
                OrderItem(
                    order_id=order.id,
                    product_id=pid,
                    qty=qty,
                    item_price=prod.price,  
                    title=prod.title,
                )
            )

        await session.commit()

    product_list = "\n".join(
        f"{products_map[pid].title} x {qty} —à—Ç." for pid, qty in cart.items()
    )
    main_keyboard = get_main_reply_keyboard(user_id)
    await message.answer(
        "üéâ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
        f"üî¢ –í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ #{order.id}\n\n"
        f"üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã:\n{product_list}\n\n"
        f"üí∞ –°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {total_without_discount} ‚ÇΩ\n"
        f"üí∏ –°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {total_with_discount} ‚ÇΩ\n\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {comment}\n\n"
        f"üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {'–û–Ω–ª–∞–π–Ω' if pay_online else '–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'}",
        reply_markup=main_keyboard
    )
    notify_text = (
        f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.full_name} ({message.chat.id})\n\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {db_user.phone}\n\n"
        f"üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã:\n{product_list}\n\n"
        f"üí∞ –°—É–º–º–∞ –±–µ–∑ —Å–∫–∏–¥–∫–∏: {total_without_discount} ‚ÇΩ\n"
        f"üí∏ –°—É–º–º–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: {total_with_discount} ‚ÇΩ\n\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É: {comment}\n\n"
        f"üè† –ê–¥—Ä–µ—Å: {address}\n\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: {'–û–Ω–ª–∞–π–Ω' if pay_online else '–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'}"
    )
    logging.info(f"Admin IDs: {admin_id}")  
    for admin_ids in admin_id:
        try:
            await message.bot.send_message(admin_ids, notify_text)
        except Exception as e:
            logging.info(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_ids}: {e}")
            pass
    await state.clear()

@router.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def send_help_info(message: Message):
    help_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ü§ñ\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
        "üìß Email: support@example.com\n"
        "üì± Telegram: @makaaarov_13\n"
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n\n"
        "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º!"
    )

    HELP_KEYBOARD = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="exit_menu")]
    ])
        
    await message.answer(help_text, reply_markup=HELP_KEYBOARD)
